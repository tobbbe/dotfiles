
# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

function gg() {
	local message="${@:-no message}";
	git add -A && git commit -m "${message}" && git push
}

# ex `getProcessByPort 8081`, then `kill (PID == processId)` ---> https://stackoverflow.com/questions/24387451/how-can-i-kill-whatever-process-is-using-port-8080-so-that-i-can-vagrant-up
function getProcessByPort() {
	lsof -n -i4TCP:$@
}

nf() {
	cd "/Users/tobbe/Google Drive/Work/todo"
	v -c 'startinsert'
	cd -
}

function goo() {
	local message="${@:-}";
	open 'https://www.google.com/search?q='${message}
}

# ex: jsonPost :80/post
# edit with editJsonPostData
# must use quotes around property-names in json!
function jsonPost() {
	curl -H "Content-Type: application/json" -X POST --data-binary @/Users/tobbe/Downloads/body.json $@ | jq
}

# ex: jsonEditPost :80/post
function jsonEditPost() {
	editJsonPostData && jsonPost $@ | jq
}

# ex: formPost "param1=value1&param2=value2" :80/post
function formPost() {
	curl -X POST --data-urlencode $@
}

function sumlines() {
	awk '{s+=$1} END {print s}' $@
}

function gsdd() {
	# | awk '{ print length($0) " " $0; }' $file | sort -r -n | cut -d ' ' -f 2- |
	find . -type d -name .git -maxdepth 2 | sed -e "s/\.git//" | while read line ; do (echo -e "\n---\n\n\e[31m$line\e[0m\n" && cd $line && git status -s) ; done && echo "\n---"
}